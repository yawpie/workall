generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bukti {
  id_bukti   Int     @id @default(autoincrement())
  id_layanan Int
  foto       String  @db.VarChar(255)
  deskripsi  String? @db.VarChar(255)
  layanan    layanan @relation(fields: [id_layanan], references: [id_layanan], onDelete: Cascade, map: "id_layanan")

  @@index([id_layanan], map: "id_layanan")
}

model laporan {
  id_laporan      Int      @id @default(autoincrement())
  isi_laporan     String   @db.VarChar(255)
  jenis_laporan   String   @db.VarChar(255)
  id_layanan      Int
  id_user         Int
  tanggal_laporan DateTime @default(now()) @db.Date
  layanan         layanan  @relation(fields: [id_layanan], references: [id_layanan], onDelete: Cascade, map: "laporan_ibfk_1")
  user            user     @relation(fields: [id_user], references: [id_user], onDelete: Cascade, map: "laporan_ibfk_2")

  @@index([id_layanan], map: "id_layanan")
  @@index([id_user], map: "id_user")
}

model layanan {
  id_layanan     Int              @id @default(autoincrement())
  id_shop        Int
  nama_layanan   String           @db.VarChar(255)
  harga_starting Int
  kategori       layanan_kategori
  bukti          bukti[]
  laporan        laporan[]
  shop           shop             @relation(fields: [id_shop], references: [id_shop], onDelete: Cascade, map: "layanan_ibfk_1")
  pesanan        pesanan[]

  @@index([id_shop], map: "id_shop")
}

model pesanan {
  id_pesanan      Int      @id @default(autoincrement())
  tanggal_pesanan DateTime @default(now()) @db.Date
  harga_terbayar  Int
  id_layanan      Int
  id_user         Int
  user            user     @relation(fields: [id_user], references: [id_user], onDelete: Cascade, map: "id_user")
  layanan         layanan  @relation(fields: [id_layanan], references: [id_layanan], onDelete: Cascade, map: "pesanan_ibfk_1")

  @@index([id_layanan, id_user], map: "id_layanan")
  @@index([id_user], map: "id_user")
}

model review {
  id_review  Int     @id @default(autoincrement())
  id_user    Int
  rating     Int
  isi_review String? @db.VarChar(255)
  user       user    @relation(fields: [id_user], references: [id_user], onDelete: Cascade, map: "review_ibfk_1")

  @@index([id_user], map: "id_user")
}

model shop {
  id_shop            Int       @id @default(autoincrement())
  nama_toko          String    @unique(map: "nama") @db.VarChar(32)
  deskripsi          String?   @db.VarChar(255)
  status_banned_shop Boolean
  ketersediaan       Boolean
  no_rekening        BigInt
  id_user            Int
  alamat_toko        String    @db.VarChar(255)
  foto_profil_toko   String?   @db.VarChar(255)
  kontak_toko        BigInt
  layanan            layanan[]
  user               user      @relation(fields: [id_user], references: [id_user], onDelete: Cascade, map: "shop_ibfk_1")

  @@index([id_user], map: "id_user")
}

model user {
  id_user            Int       @id @default(autoincrement())
  email              String    @unique(map: "email") @db.VarChar(255)
  password           String    @db.VarChar(255)
  status_banned_user Boolean
  username           String    @db.VarChar(255)
  nama_depan         String    @db.VarChar(255)
  nama_belakang      String    @db.VarChar(255)
  no_hp              BigInt?
  laporan            laporan[]
  pesanan            pesanan[]
  review             review[]
  shop               shop[]
}

enum layanan_kategori {
  renovasi
  elektronik
  plumbing
  kendaraan
  penyewaan
}
